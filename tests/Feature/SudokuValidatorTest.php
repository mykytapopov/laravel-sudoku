<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Services\SudokuValidator;
use Tests\TestCase;

class SudokuValidatorTest extends TestCase
{
    public static function provideBoard(): \Generator
    {
        yield 'valid board' => [
            true,
            [
                ["5", ".", "4", ".", "7", ".", ".", ".", "."],
                [".", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ],
        ];
        yield 'invalid row of the board' => [
            false,
            [
                ["5", ".", "4", ".", "7", ".", ".", ".", "."],
                [".", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", "2", ".", "2", ".", ".", ".", "6"], // duplicated "2"
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ],
        ];
        yield 'invalid column of the board' => [
            false,
            [
                ["5", ".", "4", ".", "7", ".", ".", ".", "."],
                [".", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", "5", ".", ".", "3"], // duplicated "5"
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ],
        ];
        yield 'invalid block of the board' => [
            false,
            [
                ["5", ".", "4", ".", "7", ".", ".", ".", "."],
                [".", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", "6", "4", "1", "9", ".", ".", "5"], // duplicated "6"
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ],
        ];
    }

    /**
     * @dataProvider provideBoard
     *
     * @param  bool  $expected
     * @param  string[]  $board
     *
     * @return void
     */
    public function test_isValid(bool $expected, array $board): void
    {
        $sudokuValidator = new SudokuValidator();

        $this->assertEquals($expected, $sudokuValidator->isValid($board));
    }
}
